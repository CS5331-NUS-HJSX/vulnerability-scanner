from html.parser import HTMLParser  
from urllib.request import urlopen  
from urllib import parse

# We are going to create a class called LinkParser that inherits some
# methods from HTMLParser which is why it is passed into the definition

class CrawledPage:
    url = ""
    inputs = []

    def __init__(self, url, inputs):
        self.url = url
        self.inputs = inputs

class HtmlTag:
    tag = ""
    attributes = []

    def __init__(self, tag, attrs):
        self.tag = tag
        self.attrs = attrs

class LinkParser(HTMLParser):
    links = []
    inputs = []

    # This is a function that HTMLParser normally has
    # but we are adding some functionality to it
    def handle_starttag(self, tag, attrs):
        # We are looking for the begining of a link. Links normally look
        # like <a href="www.someurl.com"></a>
        if tag == 'a':
            for (key, value) in attrs:
                if key == 'href':
                    # We are grabbing the new URL. We are also adding the
                    # base URL to it. For example:
                    # www.netinstructions.com is the base and
                    # somepage.html is the new URL (a relative URL)
                    #
                    # We combine a relative URL with the base URL to create
                    # an absolute URL like:
                    # www.netinstructions.com/somepage.html
                    newUrl = parse.urljoin(self.baseUrl, value)
                    # And add it to our colection of links:
                    self.links = self.links + [newUrl]
        elif tag == 'input':
            for (key,value) in attrs:
                if key == 'name':
                    self.inputs = self.inputs + [HtmlTag(tag, attrs)]

    def handle_startendtag(self, tag, attrs):
        if tag == 'input':
            for (key,value) in attrs:
                if key == 'name':
                    self.inputs = self.inputs + [HtmlTag(tag, attrs)]


    # This is a new function that we are creating to get links
    # that our spider() function will call
    def getLinks(self, url):
        self.links = []
        self.inputs = []
        # Remember the base URL which will be important when creating
        # absolute URLs
        self.baseUrl = url
        # Use the urlopen function from the standard Python 3 library
        response = urlopen(url)
        charset = response.headers.get_content_charset()
        if not (charset and (not charset.isspace())):
            charset = "utf-8"
        # Make sure that we are looking at HTML and not other things that
        # are floating around on the internet (such as
        # JavaScript files, CSS, or .PDFs for example)
        if "text/html" in response.getheader('Content-Type'):
            htmlBytes = response.read()
            htmlString = htmlBytes.decode(charset)
            self.feed(htmlString)
            return htmlString, self.links, self.inputs
        else:
            return "",[]

# And finally here is our spider. It takes in an URL, a word to find,
# and the number of pages to search through before giving up
def spider(url, maxPages):  
    pagesToVisit = [url]
    pagesVisited = []
    numberVisited = 0
    foundWord = False
    crawledPages = []
    # The main loop. Create a LinkParser and get all the links on the page.
    # Also search the page for the word or string
    # In our getLinks function we return the web page
    # (this is useful for searching for the word)
    # and we return a set of links from that web page
    # (this is useful for where to go next)
    while numberVisited < maxPages and pagesToVisit != []:
        url = pagesToVisit[0]
        pagesToVisit = pagesToVisit[1:]

        if url not in pagesVisited:
            numberVisited = numberVisited +1
            try:
                print(numberVisited, "Visiting:", url)
                parser = LinkParser()
                data, links, inputs = parser.getLinks(url)
                pagesToVisit = sorted(list(set(pagesToVisit + links)))

                pagesVisited = pagesVisited + [url]
                crawledPages = crawledPages + [CrawledPage(url, inputs)]
            except Exception as e:
                print(e)
                print(" **Failed!**")
    if foundWord:
        print("The word", word, "was found at", url)
    else:
        print("Word never found")

    return crawledPages

pages = spider("https://www.facebook.com/", 10)
for page in pages:
    print(page.url)
    print(page.inputs)