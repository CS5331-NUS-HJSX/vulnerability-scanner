from html.parser import HTMLParser  
from urllib.request import urlopen  
from urllib import parse

from crawlerhttp import CrawlerHttp, CrawlerHttpResponse, CrawlerHttpInput, CrawlerHttpSubmission
from attacker import attack, attack_sqli

from bs4 import BeautifulSoup

import json

#attackURL = "http://10.0.1.14/Assignment2/"    #A2 website
attackURL = "http://192.168.222.143"                   #A3 website
maxIteration = 100

crawler = CrawlerHttp()

def spider(url, iteration):  
    pagesToVisit = [url]
    pagesVisited = []
    numberVisited = 0
    crawledPages = []

    while pagesToVisit != []:
        url = pagesToVisit[0]
        pagesToVisit = pagesToVisit[1:]

        if url not in pagesVisited:
            numberVisited = numberVisited +1
            try:
                crawledDocument = crawler.send(url)
                links = crawledDocument.getLink()

                if numberVisited < iteration:
                    pagesToVisit = sorted(list(set(pagesToVisit + links)))

                pagesVisited = pagesVisited + [url]
                crawledPages = crawledPages + [crawledDocument]
            except Exception as e:
                print(" **Failed!**")
                print(e)
    return crawledPages

pages = spider(attackURL, maxIteration)

def formatData(data, length):
    dataString = str(data)
    dataLengthFormat = "{:<" + str(length) + "}"
    return dataLengthFormat.format(dataString[:length])

def getInputName(input_result_set):
    input_array = []
    for x in input_result_set:
        if x.has_attr("name"):
            input_obj = { "name": x.attrs["name"] }
            if x.has_attr("value"):
                input_obj["value"] = x.attrs["value"]
            input_array.append(input_obj)
    return input_array

def getFormData(form_result_set):
    form_array = []
    for x in form_result_set:
        form_obj = {}
        if x.has_attr("action"):
            form_obj["action"] = x["action"]
        if x.has_attr("method"):
            form_obj["method"] = x["method"]
        input_result_set = x.find_all("input")
        form_obj["input"] = getInputName(input_result_set)

        form_array.append(form_obj)

    return form_array

result_array = []
allSubmissions = []

for page in pages:
    forms = page.getSubmission()
    allSubmissions = allSubmissions + forms
    formJson = []
    for submission in forms:
        formJson = formJson + [submission.json()]
        
    if(len(formJson) > 0):
        data = {
            "url": page.url,
            "form": formJson
        }
        result_array.append(data)
    
with open('crawler_output.json', 'w') as outfile:  
    json.dump(result_array, outfile, indent=4)

def formatJson(title, data):
    resultJson = {}
    resultJsonResults = {}

    for submission in data:
        if not submission.baseUrl in resultJsonResults:
            resultJsonResults[submission.baseUrl] = []
        
        submissionJson = {}
        submissionJson["method"] = submission.method
        submissionJson["params"] = submission.data
        submissionJson["endpoint"] = submission.path

        resultJsonResults[submission.baseUrl] = resultJsonResults[submission.baseUrl] + [submissionJson]

    resultJson["results"] = resultJsonResults
    resultJson["class"] = title
    return resultJson

attackResult = attack(allSubmissions, "servercodeinjection.txt", "servercodeinjectionexpected.txt")
resultjson = formatJson("Server Side Code Injection", attackResult)
with open('result_server_code_injection.json', 'w') as outfile:
    json.dump(resultjson, outfile, indent=4)

attackResult = attack(allSubmissions, "unvalidatedredirect.txt", "unvalidatedredirectexpected.txt", checkRedirect=True)
resultjson = formatJson("Open Redirect", attackResult)
with open('result_open_redirect.json', 'w') as outfile:
    json.dump(resultjson, outfile, indent=4)

attackResult = attack(allSubmissions, "directorytraversal.txt", "directorytraversalexpected.txt")
resultjson = formatJson("Directory Traversal", attackResult)
with open('result_directory_traversal.json', 'w') as outfile:
    json.dump(resultjson, outfile, indent=4)

attackResult = attack(allSubmissions, "shellcommandinjection.txt", "shellcommandinjectionexpected.txt")
resultjson = formatJson("Shell Command Injection", attackResult)
with open('result_shell_command_injection.json', 'w') as outfile:
    json.dump(resultjson, outfile, indent=4)

# attackResult = attack_sqli(allSubmissions, "sqlinjection.txt", "sqlinjectionexpected.txt")
# resultjson = formatJson("SQL Injection", attackResult)
# with open('result_sql_injection.json', 'w') as outfile:
#     json.dump(resultjson, outfile, indent=4)
